scanf(), printf()
%d  정수
%f   실수
%lf  실수(doudle)
%c   문자
%s   문자열
scanf()  시 &는 변수 주소 불러오기



상수 문장
#include <stdio . h> 
#difine (상수이름) 값;
or
함수내에서
const (상수 타입) (변수 이름) = 값;




이스케이프 시퀀스
\ = 역슬레쉬임

\0  널문자
\a  경고             '삐'하는경고응발생
\b  백스페이스   커서롤 현재의 위치에서 한 글자 뒤로 옮긴다.
\t  수평탭          커서의 위치똘 현재 라인에서 설정된 다음 댐 위치로 옮긴다.
\n  줄바            커서활 다옴 라인의 시작 위치로 옮긴다. \ v 직탬 vertical tab) 설정되어 있는 다음 수직 댐 위치로 커서률 이동
\f  폼피드          주로 프린터에서 강체적으로 다음 페이지로 넘길 때 사용된다.
\r  캐리지 리턴   커서를 현재 라인의 시작 위치로 옮긴다
\"  큰따옴표
\'  작은따옴표
\\ 역슬래쉬




산술, 대입 연산자
=             대입 연산자 오른쪽은 왼쪽에 대입
+ - * / %  산술 연산자 사칙연산 % 는 나머지
() 괄호도 사용가능

+ -           부호 양수 음수를 표시

++ --        증가와 감소 연산
++x 는 증가후 연산  x++는 연산후 증가

++x 수식의 값은 증가된 x값이다.
x++ 수식의 값은 종가되지 않은 원래의 값이다.
--x   수식의 값은 강소된 OI 다.
--x   수식의 값은 감소되지 않은 원래의 값이다.





관계 연산자
0을 제외한 숫자= 참 
0 = 거짓
> < == != >= <= 관계 연산자 오른쪽과 왼쪽을 비교
x == y     x와 y 가같은가?
x != y   x와 y 가다른가?
x > y    x가 y 보다큰가?
x < y    x가 y 보다작은가?
x >= y  x가 y 보다 크거나 같은가?
x <= y  x가 y 가 보다 작거나 같은가? 



논리 연산자
&&  || (shift+역슬레쉬) !
x && y   AND 연산 x와 y가 모두 참이면 참, 그렇지않으면 거짓
x || y      OR 연산 x나 y중에 하나만 참이면 참, 모두 거짓이면 거짓
!x          NOT 연산 x가 참이면 거짓, x 가 거짓이면 참



absolute_value = (x > 0) ? x: -x;               // 절대값 계산
max_ value = (x > y) ? x: y;                     // 최대값 계산
min value = ( x < y) ? x: y ;                     // 최소값 계산






콤마 < 대입 < 논리 < 관계 < 산술 < 단향




조건문
if (이게 참일시 블록(복합문 {}중괄호) 안의 코드를 실행)
{
참일시 코드실행
}
else  (위의 코드가 거짓일이 실행)
{
거짓일시 코드실행
}

if( score >= 80 )
{
if ( score >= 90 )
printf("A학점입니다.” );             // else는 가장 가까이있는 if문이랑 매치되지만  지금처럼 중괄호로 블럭 생성시 위에있는 if랑 매치
}
else
printf ( 확점이나 학점은 아닙니디 .\n” ) ; 



byte	8 비트	-128	127
short	16 비트	-32,768	32,767
int	32 비트	-2,147,483,648	2,147,483,647
long	64 비트	-9,223,372,036,854,775,808	9,223,372,036,854,775,807
float	32 비트	대략 7개의 유효 숫자를 가지며,  -3.4E+38의 근사값	대략 7개의 유효 숫자를 가지며, 3.4E+38의 근사값
double	64 비트	대략 15개의 유효 숫자를 가지며,
-1.7E+308의 근사값	대략 15개의 유효 숫자를 가지며,
1.7E+308의 근사값
